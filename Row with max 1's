1.A simple method is to do a row wise traversal of the matrix, count the number of 1s in each row and compare the count with max. 
Finally, return the index of row with maximum 1s. 
The time complexity of this method is O(m*n) where m is number of rows and n is number of columns in matrix.
for(int i=0;i<m;i++){
	      for(int j=0;j<n;j++){
	          if(arr[j][i]==1){
	              return j;
	          }
	      }
	  }
	  return -1;
2.Since each row is sorted, we can use Binary Search to count of 1s in each row.
We find the index of first instance of 1 in each row. The count of 1s will be equal to total number of columns minus the index of first 1.
Time Complexity: O(mLogn) where m is number of rows and n is number of columns in matrix.

#include <bits/stdc++.h> 
using namespace std; 

// The main function that returns index 
// of row with maximum number of 1s. 
int rowWithMax1s(bool mat[R][C]) 
{ 
	int i, index; 

	// Initialize max using values from first row. 
	int max_row_index = 0; 
	int max = first(mat[0], 0, C - 1); 

	// Traverse for each row and count number of 1s 
	// by finding the index of first 1 
	for (i = 1; i < R; i++) 
	{ 
		// Count 1s in this row only if this row 
		// has more 1s than max so far 

		// Count 1s in this row only if this row 
		// has more 1s than max so far 
		if (max != -1 && mat[i][C - max - 1] == 1) 
		{ 
			// Note the optimization here also 
			index = first (mat[i], 0, C - max); 

			if (index != -1 && C - index > max) 
			{ 
				max = C - index; 
				max_row_index = i; 
			} 
		} 
		else
		{ 
			max = first(mat[i], 0, C - 1); 
		} 
	} 
	return max_row_index; 
} 

3.Instead of doing binary search in every row, we first check whether the row has more 1s than max so far. 
If the row has more 1s, then only count 1s in the row.
Also, to count 1s in a row, we don’t do binary search in complete row, we do search in before the index of last max.

#include <bits/stdc++.h> 
using namespace std; 

// The main function that returns index 
// of row with maximum number of 1s. 
int rowWithMax1s(bool mat[R][C]) 
{ 
	int i, index; 

	// Initialize max using values from first row. 
	int max_row_index = 0; 
	int max = first(mat[0], 0, C - 1); 

	// Traverse for each row and count number of 1s 
	// by finding the index of first 1 
	for (i = 1; i < R; i++) 
	{ 
		// Count 1s in this row only if this row 
		// has more 1s than max so far 

		// Count 1s in this row only if this row 
		// has more 1s than max so far 
		if (max != -1 && mat[i][C - max - 1] == 1) 
		{ 
			// Note the optimization here also 
			index = first (mat[i], 0, C - max); 

			if (index != -1 && C - index > max) 
			{ 
				max = C - index; 
				max_row_index = i; 
			} 
		} 
		else
		{ 
			max = first(mat[i], 0, C - 1); 
		} 
	} 
	return max_row_index; 
} 

4.Step1: Get the index of first (or leftmost) 1 in the first row.

Step2: Do following for every row after the first row
…IF the element on left of previous leftmost 1 is 0, ignore this row.
…ELSE Move left until a 0 is found. Update the leftmost index to this index and max_row_index to be the current row.

The time complexity is O(m+n) because we can possibly go as far left as we came ahead in the first step.

// The main function that returns index of row with maximum number of 1s. 
int rowWithMax1s(bool mat[R][C]) 
{ 
	// Initialize first row as row with max 1s 
	int max_row_index = 0; 

	// The function first() returns index of first 1 in row 0. 
	// Use this index to initialize the index of leftmost 1 seen so far 
	int j = first(mat[0], 0, C-1); 
	if (j == -1) // if 1 is not present in first row 
	j = C - 1; 

	for (int i = 1; i < R; i++) 
	{ 
		// Move left until a 0 is found 
		while (j >= 0 && mat[i][j] == 1) 
		{ 
		j = j-1; // Update the index of leftmost 1 seen so far 
		max_row_index = i; // Update max_row_index 
		} 
	} 
	return max_row_index; 
} 

